<div class="woocommerce-MyAccount-content tab-content" id="tab3">
	<input type="hidden" id="pKey" value="<%=publicKey%>">
	<script src="https://sdk.mercadopago.com/js/v2"></script>
	

	<div class="woocommerce-notices-wrapper"></div>
	<%if(user){%>
		<%user.orders.forEach(payment=>{%>

	
	<div class="modal fade" id="llll<%=payment.order.id%>Edited" tabindex="-1" aria-labelledby="llll<%=payment.order.id%>edit" aria-hidden="true">
		<div class="modal-dialog">
		  <div class="modal-content">
			<div class="modal-header">
			  <h1 class="modal-title fs-5" id="llll<%=payment.order.id%>edit">-</h1>
			  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
  

		
	

	
	  
	</div>
	
  </div>
</div>
</div>


<script id="NNN<%=payment.order.id%>">
	const pKey<%=payment.order.id%> = document.getElementById('pKey').value
	const totalElement<%=payment.order.id%> = document.getElementById('parcial<%=payment.order.id%>');

	/*const name = document.getElementById('billing_first_name')
	const lastname = document.getElementById('billing_last_name')
	const cpf = document.getElementById('billing_cpf')
	const address = document.getElementById('billing_address_1')
	const street_number = document.getElementById('billing_number')
	const cep = document.getElementById('billing_postcode')
	const bairro = document.getElementById('billing_neighborhood')
	const city = document.getElementById('billing_city')
	const country = document.getElementById('billing_country')
	const gender = document.getElementById('billing_gender')
	const birthday = document.getElementById('billing_birthdate')
	const state = document.getElementById('billing_state')
	const phone = document.getElementById('billing_phone')
	const whatsapp = document.getElementById('billing_cellphone')
	const email = document.getElementById('billing_email')
	const totalAmount = document.getElementById('total')*/
	const mp<%=payment.order.id%> = new MercadoPago(pKey<%=payment.order.id%>,{
    locale: 'pt-BR'
  });
	const bricksBuilder<%=payment.order.id%> = mp<%=payment.order.id%>.bricks();
    const renderPaymentBrick<%=payment.order.id%> = async (bricksBuilder<%=payment.order.id%>) => {
      const settings<%=payment.order.id%> = {
        initialization: {
          /*
            "amount" é a quantia total a pagar por todos os meios de pagamento com exceção da Conta Mercado Pago e Parcelas sem cartão de crédito, que têm seus valores de processamento determinados no backend através do "preferenceId"
          */
         preferenceId: "123",
         amount:100,
		
		 
		},
		
        customization: {
          visual: {
			hideStatusDetails: true,
            hideTransactionDate: true,
            style: {
              theme: "bootstrap",
			  customVariables:{
				formBackgroundColor:'pink'
			  }
            },
          },
          paymentMethods: {
            creditCard: "all",
			//atm: "all",
            maxInstallments: 1
          },
        },
        callbacks: {
          onReady: () => {
          console.log('bricks inicializado')
          },
		  onError: (error) => {
            // callback chamado para todos os casos de erro do Brick
            console.log(error);
          },
          onSubmit:async ({ selectedPaymentMethod, formData}) => {
            try {
				// callback chamado quando há click no botão de envio de dados

// Obtém o texto dentro do elemento
const totalText<%=payment.order.id%> = totalElement<%=payment.order.id%>.textContent;

// Usa expressão regular para extrair apenas os números e ponto decimal

			formData.transaction_amount = await parseFloat(totalElement<%=payment.order.id%>.value);
			formData.name =  '<%=user.name%>';
			formData.address =  '<%=user.address%>';
			formData.phone =  '<%=user.phone%>';
			formData.city =  '<%=user.city%>';
			formData.bairro =  '<%=user.bairro%>';
			formData.whatsapp =  '<%=user.phone%>';
			formData.cep =  '<%=user.cep%>';
			formData.street_number =  '<%=user.street_number%>';
			formData.state =  '<%=user.state%>';
			formData.cpf =  '<%=user.cpfcnpj%>';
			formData.description =  'IelaBag Assinatura pagamento parcial'
			formData.payer.phone =  {
				area_code:'55',
				number: '<%=user.phone%>'
			}
			formData.items =  cart<%=payment.order.id%>
			formData.payer.first_name=  '<%=payment.order.payer.first_name%>'
			formData.payer.last_name =  '<%=payment.order.payer.last_name%>'
			formData.payer.email =  '<%=user.email%>'
			formData.country =  '<%=user.country%>'
			formData.gender =  '<%=user.gender%>'
			formData.birthday =  '<%=user.birthday%>'
			//formData.payer.phone.area_code = await '84'
			//formData.payer.identification.number = await cpf.value
			//formData.payer.identification.type = await 'CPF'


console.log(formData.payer)
            return new Promise((resolve, reject) => {
              fetch("/process_payment", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(formData),
              })
                .then((response) => {
					console.log(response)
				return	response.json()})
                .then((response) => {
                  // receber o resultado do pagamento
                  resolve();
                })
                .catch((error) => {
                  // manejar a resposta de erro ao tentar criar um pagamento
                  reject();
                });
            });
			} catch (error) {
				console.log(error)
			}
          },
         
        },
      };
      window.paymentBrickController = await bricksBuilder<%=payment.order.id%>.create(
        "payment",
        "paymentBrick_container<%= payment.order.id %>",
        settings<%=payment.order.id%>
      );
    };
    renderPaymentBrick<%=payment.order.id%>(bricksBuilder<%=payment.order.id%>);

  </script>


<script id="<%= payment.order.id %>" type="text/javascript">
	const cart<%= payment.order.id %> = [];
	const itemList<%= payment.order.id %> = [];
	let ccart<%=payment.order.id%> = document.getElementById('ccart<%=payment.order.id%>')
	let parcial<%= payment.order.id %> = document.getElementById('parcial<%= payment.order.id %>')
	
	let itemCount<%= payment.order.id %> = 0;
  
	// Função para carregar um carrinho pré-existente
	function loadCart<%= payment.order.id %>(preloadedCart) {
	  cart<%= payment.order.id %>.push(...preloadedCart);
	  itemCount<%= payment.order.id %> = cart<%= payment.order.id %>.reduce((total, item) => total + item.quantity, 0);
	  updateCart<%= payment.order.id %>();
	  updateTotal<%= payment.order.id %>();
	}
  
	function addToCart<%= payment.order.id %>(productName, price, quantity, size, id, photo) {
	  const priceFloat<%= payment.order.id %> = parseFloat(price);
  
	  if (isNaN(priceFloat<%= payment.order.id %>) || priceFloat<%= payment.order.id %> <= 0) {
		alert("Por favor, insira um preço válido.");
		return;
	  }
  
	  const item<%= payment.order.id %> = {
		name: productName,
		price: priceFloat<%= payment.order.id %>,
		quantity: quantity,
		description: `${quantity}x ${productName} ${size} R$ ${priceFloat<%= payment.order.id %>.toFixed(2)}`,
		size: size,
		id: id,
		photo: photo
	  };
  
	  const existingItemIndex<%= payment.order.id %> = cart<%= payment.order.id %>.findIndex(cartItem => cartItem.id === id);
  
	  if (existingItemIndex<%= payment.order.id %> !== -1) {
		cart<%= payment.order.id %>[existingItemIndex<%= payment.order.id %>].quantity += quantity;
	  } else {
		cart<%= payment.order.id %>.push(item<%= payment.order.id %>);
	  }
  
	  itemCount<%= payment.order.id %> += quantity;
	  updateCart<%= payment.order.id %>();
	  updateTotal<%= payment.order.id %>();
	  console.log(cart<%= payment.order.id %>);
	}
  
	function updateCart<%= payment.order.id %>() {
	  const cartList<%= payment.order.id %> = document.getElementById('cart-items<%= payment.order.id %>');
	  const cartCount<%= payment.order.id %> = document.getElementById('cartCount<%= payment.order.id %>');
	  let p<%=payment.order.id%> = document.getElementById(`p<%=payment.order.id%>`)
	  console.log(p<%=payment.order.id%>)
	  // Limpa a lista do carrinho
	  cartList<%= payment.order.id %>.innerHTML = '';
  
	  // Adiciona itens ao carrinho
	  cart<%= payment.order.id %>.forEach(item<%= payment.order.id %> => {
		const listItem<%= payment.order.id %> = document.createElement('li');
		listItem<%= payment.order.id %>.id = `${<%=payment.order.id%>}list`;
		listItem<%= payment.order.id %>.style.listStyle = 'none';
		listItem<%= payment.order.id %>.textContent = `${item<%= payment.order.id %>.quantity}x ${item<%= payment.order.id %>.name} ${item<%= payment.order.id %>.size} - R$ ${item<%= payment.order.id %>.price.toFixed(2)}`;
	
		cartList<%= payment.order.id %>.appendChild(listItem<%= payment.order.id %>);
		let lt<%= payment.order.id %> = `${item<%= payment.order.id %>.quantity}x ${item<%= payment.order.id %>.name} ${item<%= payment.order.id %>.size} - R$ ${item<%= payment.order.id %>.price.toFixed(2)}`;
		itemList<%= payment.order.id %>.push(lt<%= payment.order.id %>);
		console.log(lt<%= payment.order.id %>);
  
		if (item<%= payment.order.id %>.quantity === 0) {
		  listItem<%= payment.order.id %>.textContent = '';
		}
	  });
  ccart<%= payment.order.id %> .value = cart<%= payment.order.id %> 
	  cartCount<%= payment.order.id %>.innerText = itemCount<%= payment.order.id %>;
	}
  
	function updateTotal<%= payment.order.id %>() {
	  const totalElement<%= payment.order.id %> = document.getElementById('total<%= payment.order.id %>');
	  const total<%= payment.order.id %> = cart<%= payment.order.id %>.reduce((acc, item) => acc + item.price * item.quantity, 0);
	  totalElement<%= payment.order.id %>.textContent = `Total: R$ ${total<%= payment.order.id %>.toFixed(2)}`;
	  parcial<%= payment.order.id %> .value  = total<%= payment.order.id %>
	}

	function decrementQuantity<%= payment.order.id %>(itemId) {
	  const itemIndex<%= payment.order.id %> = cart<%= payment.order.id %>.findIndex((item) => item.id === itemId);
  console.log(itemIndex<%= payment.order.id %>)
	  if (itemIndex<%= payment.order.id %> !== -1 && cart<%= payment.order.id %>[itemIndex<%= payment.order.id %>].quantity > 0) {
		cart<%= payment.order.id %>[itemIndex<%= payment.order.id %>].quantity--;
		itemCount<%= payment.order.id %>--;
  
		updateCart<%= payment.order.id %>();
		updateTotal<%= payment.order.id %>();
		console.log(cart<%= payment.order.id %>);
	  }
	}
  
	// Carrega um carrinho pré-existente ao inicializar a página
	const preloadedCart<%= payment.order.id %> = [
	  <% if (payment.items && payment.items.length > 0) { %>
		<% payment.items.forEach(bag => { %>
		  <% if (bag.items && bag.items.length > 0) { %>
			<% bag.items.forEach(b => { %>
			  {
				name: '<%= b.name %>',
				price: <%= b.price %>,
				quantity: <%= b.quantity %>,
				description: '<%= b.description %>',
				size: '<%= b.size %>',
				photo: '<%= b.photo %>',
				id: '<%= b.id %>'
			  },
			<% }) %>
		  <% } %>
		<% }) %>
	  <% } %>
	];
  
  </script>





  
<%})%>
<%}%>	

<%if(msg){%>
<h4><%msg.message%></h4>
	<%}%>
	<table class="woocommerce-orders-table woocommerce-MyAccount-orders shop_table shop_table_responsive my_account_orders account-orders-table col-12">
		<thead>
			<tr>
									<th class="woocommerce-orders-table__header woocommerce-orders-table__header-order-number"><span class="nobr">Pedido</span></th>
									<th class="woocommerce-orders-table__header woocommerce-orders-table__header-order-number"><span class="nobr">Cliente</span></th>
									<th class="woocommerce-orders-table__header woocommerce-orders-table__header-order-number"><span class="nobr">CPF</span></th>
									<th class="woocommerce-orders-table__header woocommerce-orders-table__header-order-number"><span class="nobr">Contato</span></th>
									<th class="woocommerce-orders-table__header woocommerce-orders-table__header-order-number"><span class="nobr">E-mail</span></th>
									<th class="woocommerce-orders-table__header woocommerce-orders-table__header-order-date"><span class="nobr">Data</span></th>
									<th class="woocommerce-orders-table__header woocommerce-orders-table__header-order-status"><span class="nobr">Status</span></th>
									<th class="woocommerce-orders-table__header woocommerce-orders-table__header-order-total"><span class="nobr">Total</span></th>
									<th class="woocommerce-orders-table__header woocommerce-orders-table__header-order-actions"><span class="nobr">Ações</span></th>
							</tr>
		</thead>

		<tbody>
			<%if(user){%>

				<%user.orders.forEach(payment=>{%>

		
							<tr class="woocommerce-orders-table__row woocommerce-orders-table__row--status-cancelled order">
											<td class="woocommerce-orders-table__cell woocommerce-orders-table__cell-order-number" data-title="Pedido">		
												<%if(payment.order && payment.order.id){%>
															<a href="#">#<%=payment.order.id%></a>
															<%}else{%>
																ID de pagamento não encontrado
																<%}%>
											</td>
											<td class="woocommerce-orders-table__cell woocommerce-orders-table__cell-order-number" data-title="Cliente">
										<%if(payment.order.card && payment.order.card.cardholder){%>
													<a href="#"><%=payment.order.card.cardholder.name%></a>
												<%}else{%>
													<a href="#">Nome não encontrado</a>
													<%}%>
								            </td>
											<td class="woocommerce-orders-table__cell woocommerce-orders-table__cell-order-number" data-title="CPF">
												<%if(payment.order.payer && payment.order.payer.identification){%>
												<a href="#"><%=payment.order.payer.identification.number%></a>
												<%}else{%>
													<a href="#">CPF ou CNPJ não encontrado</a>
													<%}%>%>
								            </td>

											<td class="woocommerce-orders-table__cell woocommerce-orders-table__cell-order-number" data-title="Contato">
												<%if(payment.order.payer && payment.order.payer.phone){%>
												<a href="#">+55<%=payment.order.payer.phone.area_code%> <%=payment.order.payer.phone.number%></a>
												<%}else{%>
													<a href="#">Contato não encontrado</a>
													<%}%>%>
								            </td>
											<td class="woocommerce-orders-table__cell woocommerce-orders-table__cell-order-number" data-title="E-mail">
												<%if(payment.order.payer && payment.order.payer.email){%>

												<a href="#"><%=payment.order.payer.email%></a>
												<%}else{%>
													<a href="#">E-mail não encontrado</a>
													<%}%>%>
								            </td>
										
											<td class="woocommerce-orders-table__cell woocommerce-orders-table__cell-order-date" data-title="Data">
												<%if(payment.order.date_created){%>
															<time datetime="<%=payment.order.date_created%>"><%=payment.order.date_created%></time>
															<%}else{%>
																Data não encontrada ou não registrada
																<%}%>
													</td>
											<td class="woocommerce-orders-table__cell woocommerce-orders-table__cell-order-status" data-title="Status">
												

												<%if(payment.order.status_detail == 'pending_capture' && payment.order.status != undefined){%>
													<%=payment.order.status%>: Captura pendente
													<%}else if(payment.order.status_detail == 'accredited' && payment.order.status != undefined){%>
														<%=payment.order.status%>: Aprovado
														<%}else if(payment.order.status_detail == 'cc_rejected_other_reason' && payment.order.status != undefined){%>
															<%=payment.order.status%>: Pagamento rejeitado por alguma razão
															<%}else if(payment.order.status_detail == 'pending_waiting_transfer' && payment.order.status != undefined){%>
																<%=payment.order.status%>: Pendente aguardando transferência
																<%}else if(payment.order.status_detail == 'pending_contingency' && payment.order.status != undefined){%>
																	<%=payment.order.status%>: O pagamento está sendo processado
																	<%}else if(payment.status_detail == 'pending_review_manual' && payment.order.status != undefined){%>
																		<%=payment.order.status%>: O pagamento está em análise
																		<%}else if(payment.order.status_detail == 'cc_rejected_bad_filled_date' && payment.order.status != undefined){%>
																			<%=payment.order.status%>: Data de válidade incorreta
																			<%}else if(payment.status_detail == 'cc_rejected_bad_filled_other' && payment.order.status != undefined){%>
																				<%=payment.order.status%>: Detalhes incorretos do cartão
																				<%}else if(payment.order.status_detail == 'cc_rejected_bad_filled_security_code' && payment.order.status != undefined){%>
																					<%=payment.order.status%>: CVV incorreto
																					<%}else if(payment.order.status_detail == 'cc_rejected_blacklist' && payment.order.status != undefined){%>
																						<%=payment.order.status%>: O cartão está em uma lista negra(roubo/reclamações/fraude) 
																						<%}else if(payment.order.status_detail == 'cc_rejected_call_for_authorize' && payment.order.status != undefined){%>
																							<%=payment.order.status%>: O meio de pagamento requer autorização prévia do valor da operação
																							<%}else if(payment.order.status_detail = 'cc_rejected_card_disabled' && payment.order.status != undefined){%>
																								<%=payment.order.status%>: O cartão está inativo
																								<%}else if(payment.order.status_detail == 'cc_rejected_duplicated_payment' && payment.order.status != undefined){%>
																									<%=payment.order.status%>: Transação duplicada
																									<%}else if(payment.order.status_detail == 'cc_rejected_high_risk' && payment.order.status != undefined){%>
																										<%=payment.order.status%>: Rechaçado por prevenção de fraude
																										<%}else if(payment.order.status_detail == 'cc_rejected_insufficient_amount' && payment.order.status != undefined){%>
																											<%=payment.order.status%>: Saldo insuficiente
																											<%}else if(payment.order.status_detail == 'cc_rejected_invalid_installments' && payment.order.status != undefined){%>
																												<%=payment.order.status%>: Número de parcelas inválido
																												<%}else if(payment.order.status_detail == 'cc_rejected_max_attempts' && payment.order.status != undefined){%>
																													<%=payment.order.status%>: Número máximo de tentativas excedido
																													<%}else{%>
																															<%console.log('log')%>
																														<%}%>
															
													</td>
											<td class="woocommerce-orders-table__cell woocommerce-orders-table__cell-order-total" data-title="Total">
															<span class="woocommerce-Price-amount amount"><span class="woocommerce-Price-currencySymbol"><%=payment.order.currency_id%></span>&nbsp;<%=payment.order.transaction_amount%></span>
													</td>
											<td class="woocommerce-orders-table__cell woocommerce-orders-table__cell-order-actions" data-title="Ações">
															<button type="button" data-bs-toggle="modal" data-bs-target="#llll<%=payment.order.id%>Edited" class="woocommerce-button button view">Visualizar Bag</button>												
															</td>
									</tr>
									

							


								
									<%})%>
							<%}%>	
						</tbody>
	</table>

	

	

</div>
